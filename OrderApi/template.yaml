AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  OrderApi
  
  Sample SAM Template for OrderApi

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    Environment: 
        Variables:
          ORDERS_TABLE: !Ref OrdersTable
          ORDER_QUEUE: !Ref OrderSqsQueue
          ORDER_SNS_TOPIC: !Ref OrderSNSTopic

Resources:
  OrderSqsQueue:
    Type: AWS::SQS::Queue
  OrderSNSTopic:
    Type: AWS::SNS::Topic
  OrdersTable: # DynamoDB Table Name
    Type: AWS::Serverless::SimpleTable
    Properties: 
      PrimaryKey: 
        Name: id
        Type: Number
  CreateOrderFunction: #Lambda function Name
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: order/createOrder #folder path where main.go for the particular lambda present
      Handler: order/createOrder #folder path where main.go for the particular lambda present
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            !Ref OrdersTable
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /orders
            Method: POST
  GetAllOrdersFunction: #Lambda function Name
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: order/fetchAllOrder #folder path where main.go for the particular lambda present
      Handler: order/fetchAllOrder #folder path where main.go for the particular lambda present
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            !Ref OrdersTable
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /orders
            Method: GET
  GetSpecificOrdersFunction: #Lambda function Name
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: order/fetchByOrderID #folder path where main.go for the particular lambda present
      Handler: order/fetchByOrderID #folder path where main.go for the particular lambda present
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            !Ref OrdersTable
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /orders/{id}
            Method: GET
  UpdateOrdersFunction: #Lambda function Name
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: order/updateOrder #folder path where main.go for the particular lambda present
      Handler: order/updateOrder #folder path where main.go for the particular lambda present
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            !Ref OrdersTable
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /orders
            Method: PUT
  DeleteOrdersFunction: #Lambda function Name
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: order/deleteOrder #folder path where main.go for the particular lambda present
      Handler: order/deleteOrder #folder path where main.go for the particular lambda present
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            !Ref OrdersTable
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /orders
            Method: DELETE
  OrderPublishFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: order/createOrderAsync/publish
      Handler: order/createOrderAsync/publish
      Policies:
      - SQSSendMessagePolicy:
            QueueName: !GetAtt OrderSqsQueue.QueueName
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /orderasync
            Method: POST
  OrderConsumerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: order/createOrderAsync/subscribe
      Handler: order/createOrderAsync/subscribe
      Policies:  
      - SQSPollerPolicy:
              QueueName: !GetAtt OrderSqsQueue.QueueName
      - DynamoDBCrudPolicy:
              TableName: !Ref OrdersTable
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OrderSqsQueue.Arn
            BatchSize: 10
  OrderPublishSNSFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: order/createOrderSNS/publish
      Handler: order/createOrderSNS/publish
      Policies:
      - SNSPublishMessagePolicy:
            TopicName: !GetAtt OrderSNSTopic.TopicName
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /ordersns
            Method: POST
  OrderConsumerSNSFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: order/createOrderSNS/subscribe
      Handler: order/createOrderSNS/subscribe
      Policies:  
      - DynamoDBCrudPolicy:
              TableName: !Ref OrdersTable
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        MySNSEvent:
          Type: SNS # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Topic: !Ref OrderSNSTopic
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CreateOrdersAPI:
    Description: "API Gateway endpoing url for create orders function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/orders/"
  CreateOrderFunction:
    Description: "Create Order Lambda Function ARN"
    Value: !GetAtt CreateOrderFunction.Arn
  CreateOrderFunctionIamRole:
    Description: "Create Order Lambda Function IAM Role ARN"
    Value: !GetAtt CreateOrderFunctionRole.Arn
